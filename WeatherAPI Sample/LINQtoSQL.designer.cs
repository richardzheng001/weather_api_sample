#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WeatherAPI_Sample
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="weatherforecast")]
	public partial class LINQtoSQLDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertastronomy(astronomy instance);
    partial void Updateastronomy(astronomy instance);
    partial void Deleteastronomy(astronomy instance);
    partial void Insertatmosphere(atmosphere instance);
    partial void Updateatmosphere(atmosphere instance);
    partial void Deleteatmosphere(atmosphere instance);
    partial void Insertcondition(condition instance);
    partial void Updatecondition(condition instance);
    partial void Deletecondition(condition instance);
    partial void Insertcoord(coord instance);
    partial void Updatecoord(coord instance);
    partial void Deletecoord(coord instance);
    partial void Insertcountry_code(country_code instance);
    partial void Updatecountry_code(country_code instance);
    partial void Deletecountry_code(country_code instance);
    partial void Inserteurope_capital(europe_capital instance);
    partial void Updateeurope_capital(europe_capital instance);
    partial void Deleteeurope_capital(europe_capital instance);
    partial void Insertlocation(location instance);
    partial void Updatelocation(location instance);
    partial void Deletelocation(location instance);
    partial void Inserttemperature(temperature instance);
    partial void Updatetemperature(temperature instance);
    partial void Deletetemperature(temperature instance);
    partial void Insertweather(weather instance);
    partial void Updateweather(weather instance);
    partial void Deleteweather(weather instance);
    partial void Insertwind(wind instance);
    partial void Updatewind(wind instance);
    partial void Deletewind(wind instance);
    #endregion
		
		public LINQtoSQLDataContext() : 
				base(global::WeatherAPI_Sample.Properties.Settings.Default.weatherforecastConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public LINQtoSQLDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQtoSQLDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQtoSQLDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQtoSQLDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<astronomy> astronomies
		{
			get
			{
				return this.GetTable<astronomy>();
			}
		}
		
		public System.Data.Linq.Table<atmosphere> atmospheres
		{
			get
			{
				return this.GetTable<atmosphere>();
			}
		}
		
		public System.Data.Linq.Table<condition> conditions
		{
			get
			{
				return this.GetTable<condition>();
			}
		}
		
		public System.Data.Linq.Table<coord> coords
		{
			get
			{
				return this.GetTable<coord>();
			}
		}
		
		public System.Data.Linq.Table<country_code> country_codes
		{
			get
			{
				return this.GetTable<country_code>();
			}
		}
		
		public System.Data.Linq.Table<europe_capital> europe_capitals
		{
			get
			{
				return this.GetTable<europe_capital>();
			}
		}
		
		public System.Data.Linq.Table<location> locations
		{
			get
			{
				return this.GetTable<location>();
			}
		}
		
		public System.Data.Linq.Table<temperature> temperatures
		{
			get
			{
				return this.GetTable<temperature>();
			}
		}
		
		public System.Data.Linq.Table<weather> weathers
		{
			get
			{
				return this.GetTable<weather>();
			}
		}
		
		public System.Data.Linq.Table<wind> winds
		{
			get
			{
				return this.GetTable<wind>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.astronomy")]
	public partial class astronomy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<System.DateTime> _sunrise;
		
		private System.Nullable<System.DateTime> _sunset;
		
		private System.Nullable<int> _weather_id;
		
		private EntityRef<weather> _weather;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnsunriseChanging(System.Nullable<System.DateTime> value);
    partial void OnsunriseChanged();
    partial void OnsunsetChanging(System.Nullable<System.DateTime> value);
    partial void OnsunsetChanged();
    partial void Onweather_idChanging(System.Nullable<int> value);
    partial void Onweather_idChanged();
    #endregion
		
		public astronomy()
		{
			this._weather = default(EntityRef<weather>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sunrise", DbType="DateTime")]
		public System.Nullable<System.DateTime> sunrise
		{
			get
			{
				return this._sunrise;
			}
			set
			{
				if ((this._sunrise != value))
				{
					this.OnsunriseChanging(value);
					this.SendPropertyChanging();
					this._sunrise = value;
					this.SendPropertyChanged("sunrise");
					this.OnsunriseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sunset", DbType="DateTime")]
		public System.Nullable<System.DateTime> sunset
		{
			get
			{
				return this._sunset;
			}
			set
			{
				if ((this._sunset != value))
				{
					this.OnsunsetChanging(value);
					this.SendPropertyChanging();
					this._sunset = value;
					this.SendPropertyChanged("sunset");
					this.OnsunsetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_weather_id", DbType="Int")]
		public System.Nullable<int> weather_id
		{
			get
			{
				return this._weather_id;
			}
			set
			{
				if ((this._weather_id != value))
				{
					if (this._weather.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onweather_idChanging(value);
					this.SendPropertyChanging();
					this._weather_id = value;
					this.SendPropertyChanged("weather_id");
					this.Onweather_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="weather_astronomy", Storage="_weather", ThisKey="weather_id", OtherKey="id", IsForeignKey=true)]
		public weather weather
		{
			get
			{
				return this._weather.Entity;
			}
			set
			{
				weather previousValue = this._weather.Entity;
				if (((previousValue != value) 
							|| (this._weather.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._weather.Entity = null;
						previousValue.astronomies.Remove(this);
					}
					this._weather.Entity = value;
					if ((value != null))
					{
						value.astronomies.Add(this);
						this._weather_id = value.id;
					}
					else
					{
						this._weather_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("weather");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.atmosphere")]
	public partial class atmosphere : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<double> _humidity;
		
		private System.Nullable<double> _pressure;
		
		private System.Nullable<double> _visibility;
		
		private System.Nullable<int> _weather_id;
		
		private EntityRef<weather> _weather;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnhumidityChanging(System.Nullable<double> value);
    partial void OnhumidityChanged();
    partial void OnpressureChanging(System.Nullable<double> value);
    partial void OnpressureChanged();
    partial void OnvisibilityChanging(System.Nullable<double> value);
    partial void OnvisibilityChanged();
    partial void Onweather_idChanging(System.Nullable<int> value);
    partial void Onweather_idChanged();
    #endregion
		
		public atmosphere()
		{
			this._weather = default(EntityRef<weather>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_humidity", DbType="Float")]
		public System.Nullable<double> humidity
		{
			get
			{
				return this._humidity;
			}
			set
			{
				if ((this._humidity != value))
				{
					this.OnhumidityChanging(value);
					this.SendPropertyChanging();
					this._humidity = value;
					this.SendPropertyChanged("humidity");
					this.OnhumidityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pressure", DbType="Float")]
		public System.Nullable<double> pressure
		{
			get
			{
				return this._pressure;
			}
			set
			{
				if ((this._pressure != value))
				{
					this.OnpressureChanging(value);
					this.SendPropertyChanging();
					this._pressure = value;
					this.SendPropertyChanged("pressure");
					this.OnpressureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_visibility", DbType="Float")]
		public System.Nullable<double> visibility
		{
			get
			{
				return this._visibility;
			}
			set
			{
				if ((this._visibility != value))
				{
					this.OnvisibilityChanging(value);
					this.SendPropertyChanging();
					this._visibility = value;
					this.SendPropertyChanged("visibility");
					this.OnvisibilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_weather_id", DbType="Int")]
		public System.Nullable<int> weather_id
		{
			get
			{
				return this._weather_id;
			}
			set
			{
				if ((this._weather_id != value))
				{
					if (this._weather.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onweather_idChanging(value);
					this.SendPropertyChanging();
					this._weather_id = value;
					this.SendPropertyChanged("weather_id");
					this.Onweather_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="weather_atmosphere", Storage="_weather", ThisKey="weather_id", OtherKey="id", IsForeignKey=true)]
		public weather weather
		{
			get
			{
				return this._weather.Entity;
			}
			set
			{
				weather previousValue = this._weather.Entity;
				if (((previousValue != value) 
							|| (this._weather.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._weather.Entity = null;
						previousValue.atmospheres.Remove(this);
					}
					this._weather.Entity = value;
					if ((value != null))
					{
						value.atmospheres.Add(this);
						this._weather_id = value.id;
					}
					else
					{
						this._weather_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("weather");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.condition")]
	public partial class condition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _cloudiness;
		
		private string _cloudiness_name;
		
		private System.Nullable<double> _precipitation;
		
		private string _precipitation_mode;
		
		private System.Nullable<int> _weather_id;
		
		private EntityRef<weather> _weather;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncloudinessChanging(System.Nullable<int> value);
    partial void OncloudinessChanged();
    partial void Oncloudiness_nameChanging(string value);
    partial void Oncloudiness_nameChanged();
    partial void OnprecipitationChanging(System.Nullable<double> value);
    partial void OnprecipitationChanged();
    partial void Onprecipitation_modeChanging(string value);
    partial void Onprecipitation_modeChanged();
    partial void Onweather_idChanging(System.Nullable<int> value);
    partial void Onweather_idChanged();
    #endregion
		
		public condition()
		{
			this._weather = default(EntityRef<weather>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cloudiness", DbType="Int")]
		public System.Nullable<int> cloudiness
		{
			get
			{
				return this._cloudiness;
			}
			set
			{
				if ((this._cloudiness != value))
				{
					this.OncloudinessChanging(value);
					this.SendPropertyChanging();
					this._cloudiness = value;
					this.SendPropertyChanged("cloudiness");
					this.OncloudinessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cloudiness_name", DbType="NVarChar(255)")]
		public string cloudiness_name
		{
			get
			{
				return this._cloudiness_name;
			}
			set
			{
				if ((this._cloudiness_name != value))
				{
					this.Oncloudiness_nameChanging(value);
					this.SendPropertyChanging();
					this._cloudiness_name = value;
					this.SendPropertyChanged("cloudiness_name");
					this.Oncloudiness_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_precipitation", DbType="Float")]
		public System.Nullable<double> precipitation
		{
			get
			{
				return this._precipitation;
			}
			set
			{
				if ((this._precipitation != value))
				{
					this.OnprecipitationChanging(value);
					this.SendPropertyChanging();
					this._precipitation = value;
					this.SendPropertyChanged("precipitation");
					this.OnprecipitationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_precipitation_mode", DbType="NVarChar(255)")]
		public string precipitation_mode
		{
			get
			{
				return this._precipitation_mode;
			}
			set
			{
				if ((this._precipitation_mode != value))
				{
					this.Onprecipitation_modeChanging(value);
					this.SendPropertyChanging();
					this._precipitation_mode = value;
					this.SendPropertyChanged("precipitation_mode");
					this.Onprecipitation_modeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_weather_id", DbType="Int")]
		public System.Nullable<int> weather_id
		{
			get
			{
				return this._weather_id;
			}
			set
			{
				if ((this._weather_id != value))
				{
					if (this._weather.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onweather_idChanging(value);
					this.SendPropertyChanging();
					this._weather_id = value;
					this.SendPropertyChanged("weather_id");
					this.Onweather_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="weather_condition", Storage="_weather", ThisKey="weather_id", OtherKey="id", IsForeignKey=true)]
		public weather weather
		{
			get
			{
				return this._weather.Entity;
			}
			set
			{
				weather previousValue = this._weather.Entity;
				if (((previousValue != value) 
							|| (this._weather.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._weather.Entity = null;
						previousValue.conditions.Remove(this);
					}
					this._weather.Entity = value;
					if ((value != null))
					{
						value.conditions.Add(this);
						this._weather_id = value.id;
					}
					else
					{
						this._weather_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("weather");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.coord")]
	public partial class coord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<double> _latitude;
		
		private System.Nullable<double> _longitude;
		
		private System.Nullable<int> _location_id;
		
		private EntityRef<location> _location;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnlatitudeChanging(System.Nullable<double> value);
    partial void OnlatitudeChanged();
    partial void OnlongitudeChanging(System.Nullable<double> value);
    partial void OnlongitudeChanged();
    partial void Onlocation_idChanging(System.Nullable<int> value);
    partial void Onlocation_idChanged();
    #endregion
		
		public coord()
		{
			this._location = default(EntityRef<location>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latitude", DbType="Float")]
		public System.Nullable<double> latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				if ((this._latitude != value))
				{
					this.OnlatitudeChanging(value);
					this.SendPropertyChanging();
					this._latitude = value;
					this.SendPropertyChanged("latitude");
					this.OnlatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longitude", DbType="Float")]
		public System.Nullable<double> longitude
		{
			get
			{
				return this._longitude;
			}
			set
			{
				if ((this._longitude != value))
				{
					this.OnlongitudeChanging(value);
					this.SendPropertyChanging();
					this._longitude = value;
					this.SendPropertyChanged("longitude");
					this.OnlongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_location_id", DbType="Int")]
		public System.Nullable<int> location_id
		{
			get
			{
				return this._location_id;
			}
			set
			{
				if ((this._location_id != value))
				{
					if (this._location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onlocation_idChanging(value);
					this.SendPropertyChanging();
					this._location_id = value;
					this.SendPropertyChanged("location_id");
					this.Onlocation_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="location_coord", Storage="_location", ThisKey="location_id", OtherKey="id", IsForeignKey=true)]
		public location location
		{
			get
			{
				return this._location.Entity;
			}
			set
			{
				location previousValue = this._location.Entity;
				if (((previousValue != value) 
							|| (this._location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._location.Entity = null;
						previousValue.coords.Remove(this);
					}
					this._location.Entity = value;
					if ((value != null))
					{
						value.coords.Add(this);
						this._location_id = value.id;
					}
					else
					{
						this._location_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("location");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.country_code")]
	public partial class country_code : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _country;
		
		private string _iso;
		
		private string _un;
		
		private System.Nullable<int> _un_num;
		
		private string _dialing_code;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncountryChanging(string value);
    partial void OncountryChanged();
    partial void OnisoChanging(string value);
    partial void OnisoChanged();
    partial void OnunChanging(string value);
    partial void OnunChanged();
    partial void Onun_numChanging(System.Nullable<int> value);
    partial void Onun_numChanged();
    partial void Ondialing_codeChanging(string value);
    partial void Ondialing_codeChanged();
    #endregion
		
		public country_code()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_country", DbType="NVarChar(255)")]
		public string country
		{
			get
			{
				return this._country;
			}
			set
			{
				if ((this._country != value))
				{
					this.OncountryChanging(value);
					this.SendPropertyChanging();
					this._country = value;
					this.SendPropertyChanged("country");
					this.OncountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iso", DbType="NVarChar(255)")]
		public string iso
		{
			get
			{
				return this._iso;
			}
			set
			{
				if ((this._iso != value))
				{
					this.OnisoChanging(value);
					this.SendPropertyChanging();
					this._iso = value;
					this.SendPropertyChanged("iso");
					this.OnisoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_un", DbType="NVarChar(255)")]
		public string un
		{
			get
			{
				return this._un;
			}
			set
			{
				if ((this._un != value))
				{
					this.OnunChanging(value);
					this.SendPropertyChanging();
					this._un = value;
					this.SendPropertyChanged("un");
					this.OnunChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_un_num", DbType="Int")]
		public System.Nullable<int> un_num
		{
			get
			{
				return this._un_num;
			}
			set
			{
				if ((this._un_num != value))
				{
					this.Onun_numChanging(value);
					this.SendPropertyChanging();
					this._un_num = value;
					this.SendPropertyChanged("un_num");
					this.Onun_numChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dialing_code", DbType="NVarChar(255)")]
		public string dialing_code
		{
			get
			{
				return this._dialing_code;
			}
			set
			{
				if ((this._dialing_code != value))
				{
					this.Ondialing_codeChanging(value);
					this.SendPropertyChanging();
					this._dialing_code = value;
					this.SendPropertyChanged("dialing_code");
					this.Ondialing_codeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.europe_capitals")]
	public partial class europe_capital : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _country;
		
		private string _capital;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncountryChanging(string value);
    partial void OncountryChanged();
    partial void OncapitalChanging(string value);
    partial void OncapitalChanged();
    #endregion
		
		public europe_capital()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_country", DbType="NVarChar(255)")]
		public string country
		{
			get
			{
				return this._country;
			}
			set
			{
				if ((this._country != value))
				{
					this.OncountryChanging(value);
					this.SendPropertyChanging();
					this._country = value;
					this.SendPropertyChanged("country");
					this.OncountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_capital", DbType="NVarChar(255)")]
		public string capital
		{
			get
			{
				return this._capital;
			}
			set
			{
				if ((this._capital != value))
				{
					this.OncapitalChanging(value);
					this.SendPropertyChanging();
					this._capital = value;
					this.SendPropertyChanged("capital");
					this.OncapitalChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.location")]
	public partial class location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _city;
		
		private string _country;
		
		private EntitySet<coord> _coords;
		
		private EntitySet<weather> _weathers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncityChanging(string value);
    partial void OncityChanged();
    partial void OncountryChanging(string value);
    partial void OncountryChanged();
    #endregion
		
		public location()
		{
			this._coords = new EntitySet<coord>(new Action<coord>(this.attach_coords), new Action<coord>(this.detach_coords));
			this._weathers = new EntitySet<weather>(new Action<weather>(this.attach_weathers), new Action<weather>(this.detach_weathers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_city", DbType="NVarChar(255)")]
		public string city
		{
			get
			{
				return this._city;
			}
			set
			{
				if ((this._city != value))
				{
					this.OncityChanging(value);
					this.SendPropertyChanging();
					this._city = value;
					this.SendPropertyChanged("city");
					this.OncityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_country", DbType="NVarChar(255)")]
		public string country
		{
			get
			{
				return this._country;
			}
			set
			{
				if ((this._country != value))
				{
					this.OncountryChanging(value);
					this.SendPropertyChanging();
					this._country = value;
					this.SendPropertyChanged("country");
					this.OncountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="location_coord", Storage="_coords", ThisKey="id", OtherKey="location_id")]
		public EntitySet<coord> coords
		{
			get
			{
				return this._coords;
			}
			set
			{
				this._coords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="location_weather", Storage="_weathers", ThisKey="id", OtherKey="location_id")]
		public EntitySet<weather> weathers
		{
			get
			{
				return this._weathers;
			}
			set
			{
				this._weathers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_coords(coord entity)
		{
			this.SendPropertyChanging();
			entity.location = this;
		}
		
		private void detach_coords(coord entity)
		{
			this.SendPropertyChanging();
			entity.location = null;
		}
		
		private void attach_weathers(weather entity)
		{
			this.SendPropertyChanging();
			entity.location = this;
		}
		
		private void detach_weathers(weather entity)
		{
			this.SendPropertyChanging();
			entity.location = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.temperature")]
	public partial class temperature : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<double> _value;
		
		private System.Nullable<double> _min;
		
		private System.Nullable<double> _max;
		
		private string _unit;
		
		private System.Nullable<int> _weather_id;
		
		private EntityRef<weather> _weather;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnvalueChanging(System.Nullable<double> value);
    partial void OnvalueChanged();
    partial void OnminChanging(System.Nullable<double> value);
    partial void OnminChanged();
    partial void OnmaxChanging(System.Nullable<double> value);
    partial void OnmaxChanged();
    partial void OnunitChanging(string value);
    partial void OnunitChanged();
    partial void Onweather_idChanging(System.Nullable<int> value);
    partial void Onweather_idChanged();
    #endregion
		
		public temperature()
		{
			this._weather = default(EntityRef<weather>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="Float")]
		public System.Nullable<double> value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_min", DbType="Float")]
		public System.Nullable<double> min
		{
			get
			{
				return this._min;
			}
			set
			{
				if ((this._min != value))
				{
					this.OnminChanging(value);
					this.SendPropertyChanging();
					this._min = value;
					this.SendPropertyChanged("min");
					this.OnminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_max", DbType="Float")]
		public System.Nullable<double> max
		{
			get
			{
				return this._max;
			}
			set
			{
				if ((this._max != value))
				{
					this.OnmaxChanging(value);
					this.SendPropertyChanging();
					this._max = value;
					this.SendPropertyChanged("max");
					this.OnmaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_unit", DbType="NVarChar(255)")]
		public string unit
		{
			get
			{
				return this._unit;
			}
			set
			{
				if ((this._unit != value))
				{
					this.OnunitChanging(value);
					this.SendPropertyChanging();
					this._unit = value;
					this.SendPropertyChanged("unit");
					this.OnunitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_weather_id", DbType="Int")]
		public System.Nullable<int> weather_id
		{
			get
			{
				return this._weather_id;
			}
			set
			{
				if ((this._weather_id != value))
				{
					if (this._weather.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onweather_idChanging(value);
					this.SendPropertyChanging();
					this._weather_id = value;
					this.SendPropertyChanged("weather_id");
					this.Onweather_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="weather_temperature", Storage="_weather", ThisKey="weather_id", OtherKey="id", IsForeignKey=true)]
		public weather weather
		{
			get
			{
				return this._weather.Entity;
			}
			set
			{
				weather previousValue = this._weather.Entity;
				if (((previousValue != value) 
							|| (this._weather.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._weather.Entity = null;
						previousValue.temperatures.Remove(this);
					}
					this._weather.Entity = value;
					if ((value != null))
					{
						value.temperatures.Add(this);
						this._weather_id = value.id;
					}
					else
					{
						this._weather_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("weather");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.weather")]
	public partial class weather : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _code;
		
		private string _description;
		
		private string _icon;
		
		private System.Nullable<System.DateTime> _last_updated;
		
		private System.Nullable<int> _location_id;
		
		private EntitySet<astronomy> _astronomies;
		
		private EntitySet<atmosphere> _atmospheres;
		
		private EntitySet<condition> _conditions;
		
		private EntitySet<temperature> _temperatures;
		
		private EntitySet<wind> _winds;
		
		private EntityRef<location> _location;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncodeChanging(System.Nullable<int> value);
    partial void OncodeChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OniconChanging(string value);
    partial void OniconChanged();
    partial void Onlast_updatedChanging(System.Nullable<System.DateTime> value);
    partial void Onlast_updatedChanged();
    partial void Onlocation_idChanging(System.Nullable<int> value);
    partial void Onlocation_idChanged();
    #endregion
		
		public weather()
		{
			this._astronomies = new EntitySet<astronomy>(new Action<astronomy>(this.attach_astronomies), new Action<astronomy>(this.detach_astronomies));
			this._atmospheres = new EntitySet<atmosphere>(new Action<atmosphere>(this.attach_atmospheres), new Action<atmosphere>(this.detach_atmospheres));
			this._conditions = new EntitySet<condition>(new Action<condition>(this.attach_conditions), new Action<condition>(this.detach_conditions));
			this._temperatures = new EntitySet<temperature>(new Action<temperature>(this.attach_temperatures), new Action<temperature>(this.detach_temperatures));
			this._winds = new EntitySet<wind>(new Action<wind>(this.attach_winds), new Action<wind>(this.detach_winds));
			this._location = default(EntityRef<location>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="Int")]
		public System.Nullable<int> code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(255)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_icon", DbType="NVarChar(255)")]
		public string icon
		{
			get
			{
				return this._icon;
			}
			set
			{
				if ((this._icon != value))
				{
					this.OniconChanging(value);
					this.SendPropertyChanging();
					this._icon = value;
					this.SendPropertyChanged("icon");
					this.OniconChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_last_updated", DbType="DateTime")]
		public System.Nullable<System.DateTime> last_updated
		{
			get
			{
				return this._last_updated;
			}
			set
			{
				if ((this._last_updated != value))
				{
					this.Onlast_updatedChanging(value);
					this.SendPropertyChanging();
					this._last_updated = value;
					this.SendPropertyChanged("last_updated");
					this.Onlast_updatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_location_id", DbType="Int")]
		public System.Nullable<int> location_id
		{
			get
			{
				return this._location_id;
			}
			set
			{
				if ((this._location_id != value))
				{
					if (this._location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onlocation_idChanging(value);
					this.SendPropertyChanging();
					this._location_id = value;
					this.SendPropertyChanged("location_id");
					this.Onlocation_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="weather_astronomy", Storage="_astronomies", ThisKey="id", OtherKey="weather_id")]
		public EntitySet<astronomy> astronomies
		{
			get
			{
				return this._astronomies;
			}
			set
			{
				this._astronomies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="weather_atmosphere", Storage="_atmospheres", ThisKey="id", OtherKey="weather_id")]
		public EntitySet<atmosphere> atmospheres
		{
			get
			{
				return this._atmospheres;
			}
			set
			{
				this._atmospheres.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="weather_condition", Storage="_conditions", ThisKey="id", OtherKey="weather_id")]
		public EntitySet<condition> conditions
		{
			get
			{
				return this._conditions;
			}
			set
			{
				this._conditions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="weather_temperature", Storage="_temperatures", ThisKey="id", OtherKey="weather_id")]
		public EntitySet<temperature> temperatures
		{
			get
			{
				return this._temperatures;
			}
			set
			{
				this._temperatures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="weather_wind", Storage="_winds", ThisKey="id", OtherKey="weather_id")]
		public EntitySet<wind> winds
		{
			get
			{
				return this._winds;
			}
			set
			{
				this._winds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="location_weather", Storage="_location", ThisKey="location_id", OtherKey="id", IsForeignKey=true)]
		public location location
		{
			get
			{
				return this._location.Entity;
			}
			set
			{
				location previousValue = this._location.Entity;
				if (((previousValue != value) 
							|| (this._location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._location.Entity = null;
						previousValue.weathers.Remove(this);
					}
					this._location.Entity = value;
					if ((value != null))
					{
						value.weathers.Add(this);
						this._location_id = value.id;
					}
					else
					{
						this._location_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("location");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_astronomies(astronomy entity)
		{
			this.SendPropertyChanging();
			entity.weather = this;
		}
		
		private void detach_astronomies(astronomy entity)
		{
			this.SendPropertyChanging();
			entity.weather = null;
		}
		
		private void attach_atmospheres(atmosphere entity)
		{
			this.SendPropertyChanging();
			entity.weather = this;
		}
		
		private void detach_atmospheres(atmosphere entity)
		{
			this.SendPropertyChanging();
			entity.weather = null;
		}
		
		private void attach_conditions(condition entity)
		{
			this.SendPropertyChanging();
			entity.weather = this;
		}
		
		private void detach_conditions(condition entity)
		{
			this.SendPropertyChanging();
			entity.weather = null;
		}
		
		private void attach_temperatures(temperature entity)
		{
			this.SendPropertyChanging();
			entity.weather = this;
		}
		
		private void detach_temperatures(temperature entity)
		{
			this.SendPropertyChanging();
			entity.weather = null;
		}
		
		private void attach_winds(wind entity)
		{
			this.SendPropertyChanging();
			entity.weather = this;
		}
		
		private void detach_winds(wind entity)
		{
			this.SendPropertyChanging();
			entity.weather = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.wind")]
	public partial class wind : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _direction;
		
		private string _direction_code;
		
		private string _direction_name;
		
		private string _description;
		
		private System.Nullable<double> _speed;
		
		private System.Nullable<int> _weather_id;
		
		private EntityRef<weather> _weather;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OndirectionChanging(System.Nullable<int> value);
    partial void OndirectionChanged();
    partial void Ondirection_codeChanging(string value);
    partial void Ondirection_codeChanged();
    partial void Ondirection_nameChanging(string value);
    partial void Ondirection_nameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnspeedChanging(System.Nullable<double> value);
    partial void OnspeedChanged();
    partial void Onweather_idChanging(System.Nullable<int> value);
    partial void Onweather_idChanged();
    #endregion
		
		public wind()
		{
			this._weather = default(EntityRef<weather>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_direction", DbType="Int")]
		public System.Nullable<int> direction
		{
			get
			{
				return this._direction;
			}
			set
			{
				if ((this._direction != value))
				{
					this.OndirectionChanging(value);
					this.SendPropertyChanging();
					this._direction = value;
					this.SendPropertyChanged("direction");
					this.OndirectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_direction_code", DbType="NVarChar(255)")]
		public string direction_code
		{
			get
			{
				return this._direction_code;
			}
			set
			{
				if ((this._direction_code != value))
				{
					this.Ondirection_codeChanging(value);
					this.SendPropertyChanging();
					this._direction_code = value;
					this.SendPropertyChanged("direction_code");
					this.Ondirection_codeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_direction_name", DbType="NVarChar(255)")]
		public string direction_name
		{
			get
			{
				return this._direction_name;
			}
			set
			{
				if ((this._direction_name != value))
				{
					this.Ondirection_nameChanging(value);
					this.SendPropertyChanging();
					this._direction_name = value;
					this.SendPropertyChanged("direction_name");
					this.Ondirection_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(255)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_speed", DbType="Float")]
		public System.Nullable<double> speed
		{
			get
			{
				return this._speed;
			}
			set
			{
				if ((this._speed != value))
				{
					this.OnspeedChanging(value);
					this.SendPropertyChanging();
					this._speed = value;
					this.SendPropertyChanged("speed");
					this.OnspeedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_weather_id", DbType="Int")]
		public System.Nullable<int> weather_id
		{
			get
			{
				return this._weather_id;
			}
			set
			{
				if ((this._weather_id != value))
				{
					if (this._weather.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onweather_idChanging(value);
					this.SendPropertyChanging();
					this._weather_id = value;
					this.SendPropertyChanged("weather_id");
					this.Onweather_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="weather_wind", Storage="_weather", ThisKey="weather_id", OtherKey="id", IsForeignKey=true)]
		public weather weather
		{
			get
			{
				return this._weather.Entity;
			}
			set
			{
				weather previousValue = this._weather.Entity;
				if (((previousValue != value) 
							|| (this._weather.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._weather.Entity = null;
						previousValue.winds.Remove(this);
					}
					this._weather.Entity = value;
					if ((value != null))
					{
						value.winds.Add(this);
						this._weather_id = value.id;
					}
					else
					{
						this._weather_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("weather");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
